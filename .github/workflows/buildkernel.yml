name: Build and Release Linux Kernel

on:
  schedule:
    - cron: '0 18 * * 0,2,4,6'
  workflow_dispatch:

jobs:
  fetch_versions:
    runs-on: ubuntu-latest
    outputs:
      stable_version: ${{ steps.setvars.outputs.stable_version }}
      mainline_version: ${{ steps.setvars.outputs.mainline_version }}
    steps:
      - name: Fetch Stable and Mainline Versions
        id: setvars
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          KERNEL_JSON=$(curl -s https://www.kernel.org/releases.json)
          STABLE_VERSION=$(echo "$KERNEL_JSON" | jq -r '.releases[] | select(.moniker=="stable") | .version' | head -n1)
          MAINLINE_VERSION=$(echo "$KERNEL_JSON" | jq -r '.releases[] | select(.moniker=="mainline") | .version' | head -n1)
          echo "stable_version=$STABLE_VERSION" >> $GITHUB_OUTPUT
          echo "mainline_version=$MAINLINE_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: fetch_versions
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    strategy:
      matrix:
        include:
          - version: ${{ needs.fetch_versions.outputs.stable_version }}
            type: stable
          - version: ${{ needs.fetch_versions.outputs.mainline_version }}
            type: mainline
    name: Build Linux Kernel ${{ matrix.version }} (${{ matrix.type }})
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev bison flex libssl-dev \
            libelf-dev bc fakeroot cpio rsync dwarves libudev-dev xz-utils \
            debhelper dh-python ccache tar gzip

      - name: Cache Kernel Source
        uses: actions/cache@v4
        with:
          path: ./linux-${{ matrix.version }}.tar.gz
          key: linux-source-${{ matrix.version }}
      
      - name: Download and Prepare Kernel Source
        run: |
          VERSION=${{ matrix.version }}
          if [ ! -f "linux-${VERSION}.tar.gz" ]; then
            echo "Kernel source archive not found, downloading..."
          if [[ $VERSION =~ -rc ]]; then
            wget https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git/snapshot/linux-stable-rc-${VERSION}.tar.gz
          else
            wget https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/snapshot/linux-${VERSION}.tar.gz
          fi
          else
            echo "Using cached kernel source linux-${VERSION}.tar.gz"
          fi
          tar -xf linux-${VERSION}.tar.gz
          mv linux-${VERSION} linux-src
            
      - name: Configure Kernel
        working-directory: ./linux-src
        run: |
          if [ -f /boot/config-$(uname -r) ]; then
            cp /boot/config-$(uname -r) .config
          else
            make defconfig
          fi
          yes "" | make oldconfig

      - name: Patch Kernel Config
        working-directory: ./linux-src
        run: |
          sed -i 's/^CONFIG_SYSTEM_TRUSTED_KEYS=.*/CONFIG_SYSTEM_TRUSTED_KEYS=""/' .config
          sed -i 's/^CONFIG_SYSTEM_REVOCATION_KEYS=.*/CONFIG_SYSTEM_REVOCATION_KEYS=""/' .config
          sed -i 's/^CONFIG_MODULE_SIG=.*/CONFIG_MODULE_SIG=n/' .config
          grep -q '^CONFIG_SYSTEM_TRUSTED_KEYS=' .config || echo 'CONFIG_SYSTEM_TRUSTED_KEYS=""' >> .config
          grep -q '^CONFIG_SYSTEM_REVOCATION_KEYS=' .config || echo 'CONFIG_SYSTEM_REVOCATION_KEYS=""' >> .config
          grep -q '^CONFIG_MODULE_SIG=' .config || echo 'CONFIG_MODULE_SIG=n' >> .config
          make olddefconfig

      - name: Compile Kernel and Create DEBs
        working-directory: ./linux-src
        env:
          CCACHE_DIR: ~/.ccache
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          make -j$(nproc) bindeb-pkg LOCALVERSION=-${{ matrix.type }} KDEB_PKGVERSION=$(date +%Y%m%d)-1
          mkdir -p ../artifacts
          mv ../*.deb ../artifacts/

      - name: Filter and Package Only DEBs
        working-directory: ./artifacts
        run: |
          rm -f linux-image-*-dbg*.deb
          tar -czvf ../linux-${{ matrix.version }}-${{ matrix.type }}.tar.gz *.deb
          sha256sum *.deb > SHA256SUMS.txt
          sha256sum ../linux-${{ matrix.version }}-${{ matrix.type }}.tar.gz >> SHA256SUMS.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.version }}-${{ matrix.type }}
          path: |
            artifacts/*.deb
            artifacts/SHA256SUMS.txt
            linux-${{ matrix.version }}-${{ matrix.type }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release
          # 遍历下载所有 artifacts，因为你使用了 matrix 多版本
          pattern: release-*
  
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          name: "Linux Kernel Automatic Release ${{ github.run_id }}"
          tag: "auto-${{ github.run_id }}"
          commit: ${{ github.sha }}
          allowUpdates: true
          removeArtifacts: false
          token: ${{ secrets.RELEASE_TOKEN }}
          artifacts: "./release/**/*"
          body: |
            ## Automatic Linux Kernel Build
            This release includes:
            - Latest stable & mainline kernel builds
            - DEB packages (without debug files)
            - Tar.gz bundles
            - SHA256 checksum file

